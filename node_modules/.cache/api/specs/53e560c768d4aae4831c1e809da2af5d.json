{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "title": "Symbl.ai APIs",
    "contact": {
      "email": "info@symbl.ai"
    },
    "description": "The Symbl.ai APIs provide ways to authenticate, process a conversation, and\ngenerate conversation intelligence.\n"
  },
  "servers": [
    {
      "url": "https://api.symbl.ai"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/oauth2/token:generate": {
      "post": {
        "summary": "Generate token",
        "description": "Generate a JSON Web Token (JWT) using the given credentials. The token is used to authenticate your requests to the Symbl.ai APIs. Tokens expire after 24 hours.\n\nSet **type** to `application` and enter the required **appId** and **appSecret** from your account at https://platform.symbl.ai/.\n\nIf you're new to Symbl.ai, sign up for access here: https://platform.symbl.ai/#/signup\n",
        "operationId": "generate-token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "appId",
                  "appSecret"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "application"
                    ],
                    "description": "Value must be `application`.",
                    "example": "application"
                  },
                  "appId": {
                    "type": "string",
                    "description": "Your App ID from the Symbl.ai platform at https://platform.symbl.ai/#/home.",
                    "example": "1693fc2e4ab5a1bcbd0dfb7edbe0ef69c0909ab962b272155add4e4060ac7fbc"
                  },
                  "appSecret": {
                    "type": "string",
                    "description": "Your App Secret from the Symbl.ai platform at https://platform.symbl.ai/#/home.",
                    "example": "d2ffb43607a21c271bb987e9fb2ca95097f954c6b4bbd8745c14e17816a544ae8458a67e248cc60d9f2f6e1395116b974266a87e4552d632ddd7d980577f053c"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "The JSON Web Token (JWT) access token generated by the Authentication API."
                    },
                    "expiresIn": {
                      "type": "number",
                      "description": "The number of seconds before the access token expires. When the token is new, the value is `86400` (24 hours)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad or Invalid Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/process/text": {
      "post": {
        "summary": "Submit text",
        "description": "Submit text to create a conversation and process the content.\n\nThe text must be formatted as a collection of JSON messages. Optionally, you can include metadata about the user who created the message and the duration.\n\nThe response returns a conversation ID and job ID. The conversation ID can be used with the Conversations API to generate conversation intelligence. The job ID can be used to check the status of the processing job.\n",
        "operationId": "submit-text",
        "tags": [
          "Async API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "description": "Add messages objects to find insights.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "payload"
                      ],
                      "properties": {
                        "payload": {
                          "type": "object",
                          "required": [
                            "content"
                          ],
                          "properties": {
                            "content": {
                              "type": "string"
                            }
                          }
                        },
                        "from": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "string",
                              "example": "natalia@example.com"
                            },
                            "name": {
                              "type": "string",
                              "example": "Natalia"
                            }
                          }
                        },
                        "duration": {
                          "type": "object",
                          "properties": {
                            "startTime": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "endTime": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "Your meeting name. The default name is the `conversationId`."
                  },
                  "confidenceThreshold": {
                    "type": "number",
                    "description": "Set the minimum confidence score to be considered a valid insight such as action items, follow-ups, topics, and questions. Valid range range is `<=0.5` to `<=1.0` (greater than or equal to 0.5 and less than or equal to 1.0). The default value is `0.5`."
                  },
                  "detectPhrases": {
                    "type": "boolean",
                    "description": "Detect the Actionable Phrases in each message of the conversation. Generate messages using the Conversation API Messages request. Default value is false."
                  },
                  "webhookUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL where Symbl.ai sends an HTTP request to your application when the job status is updated. This should be after making the API request."
                  },
                  "entities": {
                    "description": "Add custom entities to detect in a conversation using the Conversation API Entities request.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customType": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "detectEntities": {
                    "type": "boolean",
                    "description": "Default value is false. If not set, the Entities request does not return any entities from the conversation."
                  },
                  "enableSummary": {
                    "type": "boolean",
                    "description": "Setting this parameter to `true` generates Summaries using the Conversation API Summary request."
                  },
                  "enableAllTrackers": {
                    "type": "boolean",
                    "description": "Default value is false. Setting this parameter to `true` detects all the Trackers maintained for your account by the Management API. This enables the API to detect all the available Trackers in a specific Conversation."
                  },
                  "trackers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Promotion Mention"
                        },
                        "vocabulary": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "We have a special promotion going on if you book this before the end of the month."
                          }
                        }
                      }
                    },
                    "description": "A tracker entity containing name and vocabulary, which is a list of key words or phrases to track."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "The unique job ID you can use to track job progress."
                    },
                    "conversationId": {
                      "type": "string",
                      "description": "The unique conversation ID you can use to identify this conversation in other API requests."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/process/text/{conversationId}": {
      "put": {
        "summary": "Append text",
        "description": "Append text to a conversation that you previously processed.\n\nThe text must be formatted as a collection of JSON messages. Optionally, you can include metadata about the user who created the message and the duration.\n\nThe response returns the same conversation ID that you used for the request, and a job ID. The conversation ID can be used with the Conversations API to generate conversation intelligence. The job ID can be used to check the status of the processing job.\n",
        "operationId": "append-text",
        "tags": [
          "Async API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "description": "Add messages objects to find insights.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "payload"
                      ],
                      "properties": {
                        "payload": {
                          "type": "object",
                          "required": [
                            "content"
                          ],
                          "properties": {
                            "content": {
                              "type": "string"
                            }
                          }
                        },
                        "from": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "string",
                              "example": "natalia@example.com"
                            },
                            "name": {
                              "type": "string",
                              "example": "Natalia"
                            }
                          }
                        },
                        "duration": {
                          "type": "object",
                          "properties": {
                            "startTime": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "endTime": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "Your meeting name. The default name is the `conversationId`."
                  },
                  "confidenceThreshold": {
                    "type": "number",
                    "description": "Set the minimum confidence score to be considered a valid insight such as action items, follow-ups, topics, and questions. Valid range range is `<=0.5` to `<=1.0` (greater than or equal to 0.5 and less than or equal to 1.0). The default value is `0.5`."
                  },
                  "detectPhrases": {
                    "type": "boolean",
                    "description": "Detect the Actionable Phrases in each message of the conversation. Generate messages using the Conversation API Messages request. Default value is false."
                  },
                  "webhookUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL where Symbl.ai sends an HTTP request to your application when the job status is updated. This should be after making the API request."
                  },
                  "entities": {
                    "description": "Add custom entities to detect in a conversation using the Conversation API Entities request.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customType": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "detectEntities": {
                    "type": "boolean",
                    "description": "Default value is false. If not set, the Entities request does not return any entities from the conversation."
                  },
                  "enableSummary": {
                    "type": "boolean",
                    "description": "Setting this parameter to `true` generates Summaries using the Conversation API Summary request."
                  },
                  "enableAllTrackers": {
                    "type": "boolean",
                    "description": "Default value is false. Setting this parameter to `true` detects all the Trackers maintained for your account by the Management API. This enables the API to detect all the available Trackers in a specific Conversation."
                  },
                  "trackers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Promotion Mention"
                        },
                        "vocabulary": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "We have a special promotion going on if you book this before the end of the month."
                          }
                        }
                      }
                    },
                    "description": "A tracker entity containing name and vocabulary, which is a list of key words or phrases to track."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "The unique job ID you can use to track job progress."
                    },
                    "conversationId": {
                      "type": "string",
                      "description": "The unique conversation ID you can use to identify this conversation in other API requests."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/process/audio/url": {
      "post": {
        "summary": "Submit audio (URL)",
        "description": "Submit audio using a URL to create a conversation and process the content.\n\nThe URL must be public and go directly to the media that you want to submit. Redirected URLs, such as URLs shortened by platforms like YouTube and Bitly,\nare not supported.\n\nThe response returns a conversation ID and job ID. The conversation ID can be used with the Conversations API to generate conversation intelligence. The job ID can be used to check the status of the processing job.\n",
        "operationId": "submit-audio-url",
        "tags": [
          "Async API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of a recorded conversation to process for Conversation Intelligence."
                  },
                  "name": {
                    "type": "string",
                    "description": "Your meeting name. The default name set to `conversationId`."
                  },
                  "customVocabulary": {
                    "description": "A list of words and phrases that you provide to find and output during speech recognition.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "confidenceThreshold": {
                    "type": "number",
                    "description": "Set the minimum confidence score to be considered a valid insight such as action items, follow-ups, topics, and questions. Valid range range is `<=0.5` to `<=1.0` (greater than or equal to 0.5 and less than or equal to 1.0). The default value is `0.5`."
                  },
                  "detectPhrases": {
                    "type": "boolean",
                    "description": "Detect the Actionable Phrases in each message of the conversation. Generate messages using the Conversation API Messages request. Default value is false."
                  },
                  "webhookUrl": {
                    "type": "string",
                    "description": "The URL where Symbl.ai sends an HTTP request to your application when the job status is updated. This should be after making the API request."
                  },
                  "entities": {
                    "description": "Add custom Entities to detect in a conversation using the Conversation API Entities request. Enter a string in `customType` to identify the category or grouping for the entity. Enter the Entity as a string in `text`. Add as many objects as needed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customType": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "detectEntities": {
                    "type": "boolean",
                    "description": "Default value is false. If not set, the Entities request does not return any entities from the conversation."
                  },
                  "languageCode": {
                    "description": "Default value is `en-US`. Must be an IETF BCP 47 language tag.",
                    "type": "string",
                    "enum": [
                      "en-US",
                      "en-GB",
                      "en-AU",
                      "en-IE",
                      "en-IN",
                      "en-ZA",
                      "ru-RU",
                      "fr-CA",
                      "fr-FR",
                      "de-DE",
                      "it-IT",
                      "nl-NL",
                      "ja-JP",
                      "es-US",
                      "es-ES",
                      "ar-SA",
                      "hi-IN",
                      "pt-BR",
                      "pt-PT",
                      "fa-IR"
                    ]
                  },
                  "mode": {
                    "type": "string",
                    "description": "Accepts `phone` or `default` string value. Phone mode is best for audio generated from aphone call, typically recorded at 8khz sampling rate. Default mode works best for audio generated from a video or online meeting, typically recorded at 16khz or higher sampling rate. If you do not enter anything, the mode is set to `default`."
                  },
                  "enableSeparateRecognitionPerChannel": {
                    "type": "boolean",
                    "description": "Select `true` or `false`. Set to `true` enables Speaker Separated Channel audio processing."
                  },
                  "channelMetadata": {
                    "description": "This parameter is only passed if `enableSeparateRecognitionPerChannel` is set to `true`.  Enter a `channel` number and `speaker` object `name` and `email` to identify which speaker corresponds to which channel. Add as many objects as needed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "channel": {
                          "type": "number"
                        },
                        "speaker": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "enableSpeakerDiarization": {
                    "type": "boolean",
                    "description": "Enter `true` to enable speaker diarization for this conversation. Default value is `false`."
                  },
                  "diarizationSpeakerCount": {
                    "type": "integer",
                    "description": "This parameter is only passed if `enableSpeakerDiarization` is set to `true`. The number of unique speakers in this conversation."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "The unique job ID you can use to track job progress."
                    },
                    "conversationId": {
                      "type": "string",
                      "description": "The unique conversation ID you can use to identify this conversation in other API requests."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/process/audio/url/{conversationId}": {
      "put": {
        "summary": "Append audio (URL)",
        "description": "Append audio to an existing conversation using a URL and process the content.\n\nThe URL must be public and go directly to the media that you want to submit. Redirected URLs, such as URLs shortened by platforms like YouTube and Bitly,\nare not supported.\n\nThe response returns the same conversation ID that you used for the request, and a job ID. The conversation ID can be used with the Conversations API to generate conversation intelligence. The job ID can be used to check the status of the processing job.\n",
        "operationId": "append-audio-url",
        "tags": [
          "Async API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of a recorded conversation to process for Conversation Intelligence."
                  },
                  "name": {
                    "type": "string",
                    "description": "Your meeting name. The default name set to `conversationId`."
                  },
                  "customVocabulary": {
                    "description": "A list of words and phrases that you provide to find and output during speech recognition.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "confidenceThreshold": {
                    "type": "number",
                    "description": "Set the minimum confidence score to be considered a valid insight such as action items, follow-ups, topics, and questions. Valid range range is `<=0.5` to `<=1.0` (greater than or equal to 0.5 and less than or equal to 1.0). The default value is `0.5`."
                  },
                  "detectPhrases": {
                    "type": "boolean",
                    "description": "Detect the Actionable Phrases in each message of the conversation. Generate messages using the Conversation API Messages request. Default value is false."
                  },
                  "webhookUrl": {
                    "type": "string",
                    "description": "The URL where Symbl.ai sends an HTTP request to your application when the job status is updated. This should be after making the API request."
                  },
                  "entities": {
                    "description": "Add custom Entities to detect in a conversation using the Conversation API Entities request. Enter a string in `customType` to identify the category or grouping for the entity. Enter the Entity as a string in `text`. Add as many objects as needed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customType": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "detectEntities": {
                    "type": "boolean",
                    "description": "Default value is false. If not set, the Entities request does not return any entities from the conversation."
                  },
                  "languageCode": {
                    "description": "Default value is `en-US`. Must be an IETF BCP 47 language tag.",
                    "type": "string",
                    "enum": [
                      "en-US",
                      "en-GB",
                      "en-AU",
                      "en-IE",
                      "en-IN",
                      "en-ZA",
                      "ru-RU",
                      "fr-CA",
                      "fr-FR",
                      "de-DE",
                      "it-IT",
                      "nl-NL",
                      "ja-JP",
                      "es-US",
                      "es-ES",
                      "ar-SA",
                      "hi-IN",
                      "pt-BR",
                      "pt-PT",
                      "fa-IR"
                    ]
                  },
                  "mode": {
                    "type": "string",
                    "description": "Accepts `phone` or `default` string value. Phone mode is best for audio generated from aphone call, typically recorded at 8khz sampling rate. Default mode works best for audio generated from a video or online meeting, typically recorded at 16khz or higher sampling rate. If you do not enter anything, the mode is set to `default`."
                  },
                  "enableSeparateRecognitionPerChannel": {
                    "type": "boolean",
                    "description": "Select `true` or `false`. Set to `true` enables Speaker Separated Channel audio processing."
                  },
                  "channelMetadata": {
                    "description": "This parameter is only passed if `enableSeparateRecognitionPerChannel` is set to `true`.  Enter a `channel` number and `speaker` object `name` and `email` to identify which speaker corresponds to which channel. Add as many objects as needed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "channel": {
                          "type": "number"
                        },
                        "speaker": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "enableSpeakerDiarization": {
                    "type": "boolean",
                    "description": "Enter `true` to enable speaker diarization for this conversation. Default value is `false`."
                  },
                  "diarizationSpeakerCount": {
                    "type": "integer",
                    "description": "This parameter is only passed if `enableSpeakerDiarization` is set to `true`. The number of unique speakers in this conversation."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "The unique job ID you can use to track job progress."
                    },
                    "conversationId": {
                      "type": "string",
                      "description": "The unique conversation ID you can use to identify this conversation in other API requests."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/process/video/url": {
      "post": {
        "summary": "Submit video (URL)",
        "description": "Submit video using a URL to create a conversation and process the content.\n\nThe URL must be public and go directly to the media that you want to submit. Redirected URLs, such as URLs shortened by platforms like YouTube and Bitly,\nare not supported.\n\nThe response returns a conversation ID and job ID. The conversation ID can be used with the Conversations API to generate conversation intelligence. The job ID can be used to check the status of the processing job.\n",
        "operationId": "submit-video-url",
        "tags": [
          "Async API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of a recorded conversation to process for Conversation Intelligence."
                  },
                  "name": {
                    "type": "string",
                    "description": "Your meeting name. The default name set to `conversationId`."
                  },
                  "customVocabulary": {
                    "description": "A list of words and phrases that you provide to find and output during speech recognition.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "confidenceThreshold": {
                    "type": "number",
                    "description": "Set the minimum confidence score to be considered a valid insight such as action items, follow-ups, topics, and questions. Valid range range is `<=0.5` to `<=1.0` (greater than or equal to 0.5 and less than or equal to 1.0). The default value is `0.5`."
                  },
                  "detectPhrases": {
                    "type": "boolean",
                    "description": "Detect the Actionable Phrases in each message of the conversation. Generate messages using the Conversation API Messages request. Default value is false."
                  },
                  "webhookUrl": {
                    "type": "string",
                    "description": "The URL where Symbl.ai sends an HTTP request to your application when the job status is updated. This should be after making the API request."
                  },
                  "entities": {
                    "description": "Add custom Entities to detect in a conversation using the Conversation API Entities request. Enter a string in `customType` to identify the category or grouping for the entity. Enter the Entity as a string in `text`. Add as many objects as needed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customType": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "detectEntities": {
                    "type": "boolean",
                    "description": "Default value is false. If not set, the Entities request does not return any entities from the conversation."
                  },
                  "languageCode": {
                    "description": "Default value is `en-US`. Must be an IETF BCP 47 language tag.",
                    "type": "string",
                    "enum": [
                      "en-US",
                      "en-GB",
                      "en-AU",
                      "en-IE",
                      "en-IN",
                      "en-ZA",
                      "ru-RU",
                      "fr-CA",
                      "fr-FR",
                      "de-DE",
                      "it-IT",
                      "nl-NL",
                      "ja-JP",
                      "es-US",
                      "es-ES",
                      "ar-SA",
                      "hi-IN",
                      "pt-BR",
                      "pt-PT",
                      "fa-IR"
                    ]
                  },
                  "mode": {
                    "type": "string",
                    "description": "Accepts `phone` or `default` string value. Phone mode is best for audio generated from aphone call, typically recorded at 8khz sampling rate. Default mode works best for audio generated from a video or online meeting, typically recorded at 16khz or higher sampling rate. If you do not enter anything, the mode is set to `default`."
                  },
                  "enableSeparateRecognitionPerChannel": {
                    "type": "boolean",
                    "description": "Select `true` or `false`. Set to `true` enables Speaker Separated Channel audio processing."
                  },
                  "channelMetadata": {
                    "description": "This parameter is only passed if `enableSeparateRecognitionPerChannel` is set to `true`.  Enter a `channel` number and `speaker` object `name` and `email` to identify which speaker corresponds to which channel. Add as many objects as needed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "channel": {
                          "type": "number"
                        },
                        "speaker": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "enableSpeakerDiarization": {
                    "type": "boolean",
                    "description": "Enter `true` to enable speaker diarization for this conversation. Default value is `false`."
                  },
                  "diarizationSpeakerCount": {
                    "type": "integer",
                    "description": "This parameter is only passed if `enableSpeakerDiarization` is set to `true`. The number of unique speakers in this conversation."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "The unique job ID you can use to track job progress."
                    },
                    "conversationId": {
                      "type": "string",
                      "description": "The unique conversation ID you can use to identify this conversation in other API requests."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/process/video/url/{conversationId}": {
      "put": {
        "summary": "Append video (URL)",
        "description": "Append video to an existing conversation using a URL and process the content.\n\nThe URL must be public and go directly to the media that you want to submit. Redirected URLs, such as URLs shortened by platforms like YouTube and Bitly,\nare not supported.\n\nThe response returns the same conversation ID that you used for the request, and a job ID. The conversation ID can be used with the Conversations API to generate conversation intelligence. The job ID can be used to check the status of the processing job.\n",
        "operationId": "append-video-url",
        "tags": [
          "Async API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of a recorded conversation to process for Conversation Intelligence."
                  },
                  "name": {
                    "type": "string",
                    "description": "Your meeting name. The default name set to `conversationId`."
                  },
                  "customVocabulary": {
                    "description": "A list of words and phrases that you provide to find and output during speech recognition.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "confidenceThreshold": {
                    "type": "number",
                    "description": "Set the minimum confidence score to be considered a valid insight such as action items, follow-ups, topics, and questions. Valid range range is `<=0.5` to `<=1.0` (greater than or equal to 0.5 and less than or equal to 1.0). The default value is `0.5`."
                  },
                  "detectPhrases": {
                    "type": "boolean",
                    "description": "Detect the Actionable Phrases in each message of the conversation. Generate messages using the Conversation API Messages request. Default value is false."
                  },
                  "webhookUrl": {
                    "type": "string",
                    "description": "The URL where Symbl.ai sends an HTTP request to your application when the job status is updated. This should be after making the API request."
                  },
                  "entities": {
                    "description": "Add custom Entities to detect in a conversation using the Conversation API Entities request. Enter a string in `customType` to identify the category or grouping for the entity. Enter the Entity as a string in `text`. Add as many objects as needed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customType": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "detectEntities": {
                    "type": "boolean",
                    "description": "Default value is false. If not set, the Entities request does not return any entities from the conversation."
                  },
                  "languageCode": {
                    "description": "Default value is `en-US`. Must be an IETF BCP 47 language tag.",
                    "type": "string",
                    "enum": [
                      "en-US",
                      "en-GB",
                      "en-AU",
                      "en-IE",
                      "en-IN",
                      "en-ZA",
                      "ru-RU",
                      "fr-CA",
                      "fr-FR",
                      "de-DE",
                      "it-IT",
                      "nl-NL",
                      "ja-JP",
                      "es-US",
                      "es-ES",
                      "ar-SA",
                      "hi-IN",
                      "pt-BR",
                      "pt-PT",
                      "fa-IR"
                    ]
                  },
                  "mode": {
                    "type": "string",
                    "description": "Accepts `phone` or `default` string value. Phone mode is best for audio generated from aphone call, typically recorded at 8khz sampling rate. Default mode works best for audio generated from a video or online meeting, typically recorded at 16khz or higher sampling rate. If you do not enter anything, the mode is set to `default`."
                  },
                  "enableSeparateRecognitionPerChannel": {
                    "type": "boolean",
                    "description": "Select `true` or `false`. Set to `true` enables Speaker Separated Channel audio processing."
                  },
                  "channelMetadata": {
                    "description": "This parameter is only passed if `enableSeparateRecognitionPerChannel` is set to `true`.  Enter a `channel` number and `speaker` object `name` and `email` to identify which speaker corresponds to which channel. Add as many objects as needed.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "channel": {
                          "type": "number"
                        },
                        "speaker": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "enableSpeakerDiarization": {
                    "type": "boolean",
                    "description": "Enter `true` to enable speaker diarization for this conversation. Default value is `false`."
                  },
                  "diarizationSpeakerCount": {
                    "type": "integer",
                    "description": "This parameter is only passed if `enableSpeakerDiarization` is set to `true`. The number of unique speakers in this conversation."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "The unique job ID you can use to track job progress."
                    },
                    "conversationId": {
                      "type": "string",
                      "description": "The unique conversation ID you can use to identify this conversation in other API requests."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/job/{jobId}": {
      "get": {
        "summary": "Get job status",
        "description": "Get the status of an async processing job using the job ID.\n\nA job ID is returned when you use the Async API to process a conversation, such as submitting text to create a conversation.\n",
        "operationId": "get-job-status",
        "tags": [
          "Async API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The `jobId` displayed when the system begins processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the Job"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "completed",
                        "failed",
                        "in_progress"
                      ],
                      "description": "Status of the job"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/endpoint:connect": {
      "post": {
        "summary": "Connect to SIP or PSTN",
        "description": "Symbl.ai connects to your SIP endpoint or PSTN trunk. Once connected, the system receives the audio stream and processes for conversation intelligence.",
        "operationId": "connect-to-sip-pstn",
        "tags": [
          "Telephony API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "operation",
                  "endpoint"
                ],
                "properties": {
                  "connectionId": {
                    "type": "string",
                    "example": "d127eb54e6684df997422a3613902e38"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "start",
                      "stop"
                    ]
                  },
                  "endpoint": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "sip"
                            ]
                          },
                          "uri": {
                            "type": "string",
                            "description": "The SIP URI to use when connecting.",
                            "example": "sip:1-999-123-4567@voip.yourdomain.com"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "type",
                          "phoneNumber"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "pstn"
                            ]
                          },
                          "phoneNumber": {
                            "type": "string",
                            "description": "The phone number to be used to dial in to, using E.164 format.  Do not use special characters like () or - and leading + or international access codes like 001 or 00. For example, a US number looks like `14082924837`, and a UK number looks like `447082924837`.",
                            "example": 14082924837
                          },
                          "dtmf": {
                            "type": "string",
                            "description": "The DTMF sequence to send after the call is received.",
                            "example": "939293#"
                          }
                        }
                      }
                    ]
                  },
                  "intents": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "intent"
                      ],
                      "properties": {
                        "intent": {
                          "type": "string",
                          "enum": [
                            "answering_machine",
                            "do_not_call",
                            "not_interested",
                            "interested"
                          ],
                          "description": "Select an intent to be detected.",
                          "example": "answering_machine"
                        },
                        "silenceTimeout": {
                          "type": "number",
                          "description": "The silence timeout in seconds. Stop detecting intents after the timeout.",
                          "example": 15
                        }
                      }
                    }
                  },
                  "endpointWebhookUrl": {
                    "type": "string",
                    "description": "The Webhook URL where the system sends results after processing.",
                    "example": "https://webhook.yourdomain.com/events/fd27792d-f3b5-4f0f-a757-332ed7b2ff52"
                  },
                  "callbackUrl": {
                    "type": "string",
                    "description": "The Callback URL where the system sends results after processing.",
                    "example": "https://webhook.yourdomain.com/2328179"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "invokeOn",
                        "name"
                      ],
                      "properties": {
                        "invokeOn": {
                          "type": "string",
                          "enum": [
                            "start",
                            "stop"
                          ],
                          "description": "The event type on which to perform the action.",
                          "example": "stop"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the action.",
                          "example": "sendSummaryEmail"
                        },
                        "parameters": {
                          "type": "object",
                          "description": "An object with required input parameter data to trigger the specified action.",
                          "properties": {
                            "emails": {
                              "type": "array",
                              "example": [
                                "john.doe@somedomain.com",
                                "jane.doe@somedomain.com"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "description": "An action to perform while the connection is active. The only action currently supported is `sendSummaryEmail`."
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "session": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "users": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "user": {
                                  "type": "object",
                                  "required": [
                                    "userId",
                                    "name"
                                  ],
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "Optional Identifier other than userId to identify the user",
                                      "example": "350267c476654f919467fbac4775536d"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the user",
                                      "example": "John"
                                    },
                                    "userId": {
                                      "type": "string",
                                      "description": "Unique Identifier for user, recommended to be human readable. Usually this should be username or email Id etc. that user is also aware of.",
                                      "example": "john@yourdomain.com"
                                    },
                                    "preferredGender": {
                                      "type": "string",
                                      "enum": [
                                        "male",
                                        "female",
                                        "unknown"
                                      ],
                                      "description": "Optional. Preferred gender of the user."
                                    },
                                    "role": {
                                      "type": "string",
                                      "description": "String representing any role that this user may have",
                                      "example": "Host"
                                    },
                                    "avatar": {
                                      "type": "object",
                                      "properties": {
                                        "color": {
                                          "type": "string",
                                          "description": "RGB value in hexadecimal notation is a ‘#’ immediately followed by either three or six hexadecimal characters.",
                                          "example": "#ffbb00"
                                        }
                                      }
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "joined",
                                    "not_joined",
                                    "left"
                                  ]
                                },
                                "mode": {
                                  "type": "string",
                                  "enum": [
                                    "native",
                                    "external",
                                    "custom"
                                  ],
                                  "description": "The mode of user's joining the session"
                                }
                              }
                            }
                          },
                          "location": {
                            "type": "object",
                            "properties": {
                              "timeZone": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the timeZone",
                                    "example": "America/Los_Angeles"
                                  },
                                  "offset": {
                                    "type": "number",
                                    "default": 0,
                                    "description": "Number of minutes that need to be added or removed from the UTC time. Positive or negative numbers are accepted. For example, for PST timezone, the value should be -480 and for IST timezone, the value should be 330",
                                    "example": -480
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful connection to endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "connectionId"
                  ],
                  "properties": {
                    "connectionId": {
                      "type": "string",
                      "description": "A Unique Connection ID.  You can accept the default for testing purposes. For any subsequent requests you need to enter a unique string.",
                      "example": "d127eb54e6684df997422a3613902e38"
                    },
                    "eventUrl": {
                      "type": "string",
                      "description": "WebHook URL to be used to publish any events externally, such as `started_speaking`, `stopped_speaking` and so on.",
                      "example": "https://api.symbl.ai/v1/event/d127eb54e6684df997422a3613902e38"
                    },
                    "resultWebSocketUrl": {
                      "type": "string",
                      "description": "WebSocket URL where you can publish results.",
                      "example": "wss://api.symbl.ai/events/d127eb54e6684df997422a3613902e38h"
                    },
                    "conversationId": {
                      "type": "string",
                      "description": "The Conversation ID."
                    },
                    "summaryInfo": {
                      "type": "array",
                      "description": "The information objects containing the post meeting Summary.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user": {
                            "type": "object",
                            "description": "User specific details for Summary.",
                            "required": [
                              "userId",
                              "name"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Optional Identifier other than userId to identify the user",
                                "example": "350267c476654f919467fbac4775536d"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the user",
                                "example": "John"
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique Identifier for user, recommended to be human readable. Usually this should be username or email Id etc. that user is also aware of.",
                                "example": "john@yourdomain.com"
                              },
                              "preferredGender": {
                                "type": "string",
                                "enum": [
                                  "male",
                                  "female",
                                  "unknown"
                                ],
                                "description": "Optional. Preferred gender of the user."
                              },
                              "role": {
                                "type": "string",
                                "description": "String representing any role that this user may have",
                                "example": "Host"
                              },
                              "avatar": {
                                "type": "object",
                                "properties": {
                                  "color": {
                                    "type": "string",
                                    "description": "RGB value in hexadecimal notation is a ‘#’ immediately followed by either three or six hexadecimal characters.",
                                    "example": "#ffbb00"
                                  }
                                }
                              }
                            }
                          },
                          "url": {
                            "type": "string",
                            "description": "The URL for post meeting Summary.",
                            "example": "https://api.symbl.ai/meeting/#/eYaxzuIndLDhnMidLdfmfus="
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad or Invalid Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/conversations": {
      "get": {
        "summary": "Get conversations",
        "description": "Returns a list of conversations that you previously processed.\n\nYou can limit, filter, and sort using the query parameters. All parameters are optional.\n",
        "operationId": "get-conversations",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Enter a non-negative integer to specify the number of conversations to return. For example, if you have processed more than 3 conversations and enter `3`, the response returns 3 conversations.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Enter a non-negative number of items to skip before applying the limit.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Specify the sort order for results based on start time.  Choose for `asc` ascending order or `desc` for descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Set the start of the `startTime` range for conversations to be returned. The `startTime` is read from the Conversation entity. If you do not provide a value, the default range is the previous 7 days. The `startTime` value must be formatted in ISO 8601 format. For example `2020-07-10 15:00:00.000` is the 10th of July 2020 at 3 PM. The value must be less than the current time and less than the `endTime` of conversations to be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "Specify the end of the date time range for conversations to be returned. The `endTime` is read from the Conversation entity. If you do not provide a value, the current timestamp is the default `endTime`. The `endTime` value must be formatted in ISO 8601 format. The value must be less than current timestamp and greater than `startTime` of conversations to be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify one or more fields to be used to sort the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Enter a filter string in RSQL format. This parameter accepts all RSQL logical operator except `OR`. There is no limit on the number of filters, but each filter can only have two parameters separated by a logical operator. For example `conversation.endDate <= 2022-07-15 12:00:00.000`. Default is `conversation.startDate <= {currentTimestamp - 7 days}`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "endTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "transcriptId": {
                      "type": "string"
                    },
                    "mediaUrl": {
                      "type": "string"
                    },
                    "members": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the member."
                          },
                          "email": {
                            "type": "string",
                            "description": "Email address of the member."
                          },
                          "phone": {
                            "type": "string",
                            "description": "Phone number of the member."
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}": {
      "get": {
        "summary": "Get conversation",
        "description": "Get a conversation by ID. Returns the conversation object.",
        "operationId": "get-conversation",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "endTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "transcriptId": {
                      "type": "string"
                    },
                    "mediaUrl": {
                      "type": "string"
                    },
                    "members": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the member."
                          },
                          "email": {
                            "type": "string",
                            "description": "Email address of the member."
                          },
                          "phone": {
                            "type": "string",
                            "description": "Phone number of the member."
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "summary": "Update conversation",
        "description": "Provide any metadata you want to associate with an existing Conversation object, such as `agentId`, `customerId`, `userId`, or other unique identifier. Enter the metadata key in the `newKey` field and the value in the `New Value` field.",
        "operationId": "update-conversation",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "metadata"
                ],
                "properties": {
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "Delete conversation",
        "description": "Permanently deletes the conversation and all related entities such as messages, insights, and topics.",
        "operationId": "delete-conversation",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/members": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Conversations API"
        ],
        "summary": "Get members",
        "description": "Get members (unique speakers) in a conversation using a conversation ID.\n\nReturns a `Members` object that lists each unique speaker by member ID.\n",
        "operationId": "get-members",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "members"
                  ],
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the member."
                          },
                          "email": {
                            "type": "string",
                            "description": "Email address of the member."
                          },
                          "phone": {
                            "type": "string",
                            "description": "Phone number of the member."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/members/{memberId}": {
      "put": {
        "summary": "Update members",
        "description": "Add or change Member information by conversation ID and member ID. Use this request to add metadata of speaker name and ID, with email address optional. For example, enter an ID `agentId` and name `John Doe`.",
        "operationId": "update-members",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "name"
                ],
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "ID of the member being updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/speakers": {
      "put": {
        "summary": "Update speakers",
        "description": "Add or update metadata for one or more speakers in a conversation.",
        "operationId": "update-speakers",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "speakerEvents": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "started_speaking",
                            "stopped_speaking"
                          ]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string",
                              "format": "email"
                            }
                          }
                        },
                        "offset": {
                          "type": "object",
                          "properties": {
                            "seconds": {
                              "type": "number"
                            },
                            "nanos": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/action-items": {
      "get": {
        "summary": "Get action items",
        "description": "Get action items for a conversation.\n\nReturns an `actionItems` object that lists all action items and related data including text, message ID, assignees, and so on.\n",
        "operationId": "get-action-items",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "actionItems"
                  ],
                  "properties": {
                    "actionItems": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "score": {
                            "type": "number"
                          },
                          "messageIds": {
                            "type": "array",
                            "description": "Array of message reference ids",
                            "items": {
                              "type": "string"
                            }
                          },
                          "entities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "text": {
                                  "type": "string"
                                },
                                "beginOffset": {
                                  "type": "integer"
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "object"
                                    },
                                    "start": {
                                      "type": "string"
                                    },
                                    "end": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "assignee": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the member."
                              },
                              "email": {
                                "type": "string",
                                "description": "Email address of the member."
                              },
                              "phone": {
                                "type": "string",
                                "description": "Phone number of the member."
                              }
                            }
                          },
                          "dueBy": {
                            "type": "object",
                            "properties": {
                              "value": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date/Time value due date/time in ISO 8601 format. This will be always populated even when start and end are populated when due date/time is a range."
                              },
                              "start": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date/Time start value if due date/time is a range."
                              },
                              "end": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date/Time end value if due date/time is a range."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/analytics": {
      "get": {
        "summary": "Get analytics",
        "description": "Get analytics for a conversation.\n\nAnalytics returns speaker ratio, talk time, silence, pace, and overlap in a conversation.\n",
        "operationId": "get-analytics",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metrics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "percent": {
                            "type": "number",
                            "format": "float"
                          },
                          "seconds": {
                            "type": "number",
                            "format": "float"
                          }
                        }
                      }
                    },
                    "members": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "pace": {
                            "type": "object",
                            "properties": {
                              "wpm": {
                                "type": "integer"
                              }
                            }
                          },
                          "talkTime": {
                            "type": "object",
                            "properties": {
                              "percentage": {
                                "type": "number",
                                "format": "float"
                              },
                              "seconds": {
                                "type": "number",
                                "format": "float"
                              }
                            }
                          },
                          "listenTime": {
                            "type": "object",
                            "properties": {
                              "percentage": {
                                "type": "number",
                                "format": "float"
                              },
                              "seconds": {
                                "type": "number",
                                "format": "float"
                              }
                            }
                          },
                          "overlap": {
                            "type": "object",
                            "properties": {
                              "overlapDuration": {
                                "type": "number"
                              },
                              "overlappingMembers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    },
                                    "percent": {
                                      "type": "number",
                                      "format": "float"
                                    },
                                    "seconds": {
                                      "type": "number",
                                      "format": "float"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/entities": {
      "get": {
        "summary": "Get entities",
        "description": "Get detected entities for a conversation.\n\nReturn entities that are detected such as location, person, date, number, organization, datetime, daterange, custom entity, and so on.\n",
        "operationId": "get-entities",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "text": {
                      "type": "string"
                    },
                    "beginOffset": {
                      "type": "integer"
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "value": {
                          "type": "object"
                        },
                        "start": {
                          "type": "string"
                        },
                        "end": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/follow-ups": {
      "get": {
        "summary": "Get follow-ups",
        "description": "Get follow-ups for a conversation.\n\nReturns a `followUps` object that lists all follow-ups and related data including text, message ID, entities, and so on.\n",
        "operationId": "get-follow-ups",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "followUps"
                  ],
                  "properties": {
                    "followUps": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "score": {
                            "type": "number"
                          },
                          "messageIds": {
                            "type": "array",
                            "description": "Array of message reference ids",
                            "items": {
                              "type": "string"
                            }
                          },
                          "entities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "text": {
                                  "type": "string"
                                },
                                "beginOffset": {
                                  "type": "integer"
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "object"
                                    },
                                    "start": {
                                      "type": "string"
                                    },
                                    "end": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "channel": {
                            "type": "string",
                            "description": "Name of the channel"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/messages": {
      "get": {
        "summary": "Get messages",
        "description": "Get a Speech-to-Text transcript of all messages in a conversation.\n\nReturns a `Messages` object with optional sentiment analysis and word-level verbosity. \n",
        "operationId": "get-messages",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "description": "Return timestamps and sentiment polarity for each word in a sentence.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sentiment",
            "in": "query",
            "description": "Return sentiment polarity for each message.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "messages"
                  ],
                  "properties": {
                    "messages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "from": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the member."
                              },
                              "email": {
                                "type": "string",
                                "description": "Email address of the member."
                              },
                              "phone": {
                                "type": "string",
                                "description": "Phone number of the member."
                              }
                            }
                          },
                          "startTime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "endTime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "transcriptId": {
                            "type": "string"
                          },
                          "conversationId": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/questions": {
      "get": {
        "summary": "Get questions",
        "description": "Get questions for a conversation.\n\nReturns a `Questions` object that lists all questions and related data including text, message ID, entities, and so on.\n",
        "operationId": "get-questions",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "questions"
                  ],
                  "properties": {
                    "questions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "score": {
                            "type": "number"
                          },
                          "messageIds": {
                            "type": "array",
                            "description": "Array of message reference ids",
                            "items": {
                              "type": "string"
                            }
                          },
                          "entities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "text": {
                                  "type": "string"
                                },
                                "beginOffset": {
                                  "type": "integer"
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "object"
                                    },
                                    "start": {
                                      "type": "string"
                                    },
                                    "end": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/summary": {
      "get": {
        "summary": "Get summary",
        "description": "Get a summary of a conversation.",
        "operationId": "get-summary",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refresh",
            "in": "query",
            "description": "Set this as `true` to replace the existing summary.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summary": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "messageRefs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "10920392"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/topics": {
      "get": {
        "summary": "Get topics",
        "description": "Get topics for a conversation.\n\nReturns a `Topics` object that lists all topics. Optionally, includes the topic hierarchy and sentiment polarity for topics.\n",
        "operationId": "get-topics",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sentiment",
            "in": "query",
            "description": "Return sentiment polarity for each topic.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "parentRefs",
            "in": "query",
            "description": "Return topic hierarchy.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "topics"
                  ],
                  "properties": {
                    "topics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "score": {
                            "type": "number"
                          },
                          "messageIds": {
                            "description": "Array of message reference ids",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "entities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "text": {
                                  "type": "string"
                                },
                                "beginOffset": {
                                  "type": "integer"
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "object"
                                    },
                                    "start": {
                                      "type": "string"
                                    },
                                    "end": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/trackers-detected": {
      "get": {
        "summary": "Get trackers",
        "description": "Get all trackers that were detected in a conversation.\n\nReturned information includes the ID, name, and matches for each tracker.\n",
        "operationId": "get-detected-trackers",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "session",
                    "name",
                    "matches"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": 838389326713909000,
                      "description": "Unique internal identifier of the Tracker."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the Tracker.",
                      "example": "Denial"
                    },
                    "matches": {
                      "type": "array",
                      "description": "Array of matches for Trackers.",
                      "items": {
                        "type": "object",
                        "required": [
                          "messageRefs"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "example": "vocabulary",
                            "description": "The type of tracker."
                          },
                          "value": {
                            "type": "string",
                            "example": "not interested",
                            "description": "Word or phrase being tracked."
                          },
                          "messageRefs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "id of the message or insight being referenced"
                                },
                                "text": {
                                  "type": "string",
                                  "example": "No i am not interested."
                                },
                                "offset": {
                                  "type": "number",
                                  "example": 12,
                                  "description": "Index offset from start of message that tracked phrase detected in."
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Insight type (only applies to insightRefs)"
                                }
                              }
                            }
                          },
                          "insightRefs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "id of the message or insight being referenced"
                                },
                                "text": {
                                  "type": "string",
                                  "example": "No i am not interested."
                                },
                                "offset": {
                                  "type": "number",
                                  "example": 12,
                                  "description": "Index offset from start of message that tracked phrase detected in."
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Insight type (only applies to insightRefs)"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/transcript": {
      "post": {
        "summary": "Create formatted transcript",
        "description": "Enter a conversation ID and choose Markdown or SubRip Subtitle (SRT) to generate a formatted transcript of the conversation. Refine the output using optional parameters for paragraphs, phrases, and speaker separation.",
        "operationId": "create-formatted-transcript",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contentType"
                ],
                "properties": {
                  "contentType": {
                    "type": "string",
                    "enum": [
                      "text/markdown",
                      "text/srt"
                    ]
                  },
                  "createParagraphs": {
                    "type": "boolean"
                  },
                  "phrases": {
                    "type": "object",
                    "properties": {
                      "highlightOnlyInsightKeyPhrases": {
                        "type": "boolean"
                      },
                      "highlightAllKeyPhrases": {
                        "type": "boolean"
                      }
                    }
                  },
                  "showSpeakerSeparation": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transcript": {
                      "type": "object",
                      "properties": {
                        "payload": {
                          "type": "string"
                        },
                        "contentType": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/conversations/{conversationId}/experiences": {
      "post": {
        "summary": "Create Summary UI",
        "description": "Create a Summary UI for a conversation.\n\nYou must include a name for all options. For audio and video options you must include a URL. All other parameters are optional.\n\nThe response returns a link that you use to access the UI.\n\nFor this request, **OPTION 1** is for text, **OPTION 2** is for video, and **OPTION 3** is for audio.\n",
        "operationId": "create-summary-ui",
        "tags": [
          "Conversations API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The `conversationId` you received in an API response after processing a conversation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "enum": [
                          "verbose-text-summary"
                        ]
                      },
                      "logo": {
                        "type": "string"
                      },
                      "favicon": {
                        "type": "string"
                      },
                      "color": {
                        "type": "object",
                        "properties": {
                          "background": {
                            "type": "string",
                            "example": "#0A2136"
                          },
                          "topicsFilter": {
                            "type": "string",
                            "example": "#FF0000"
                          },
                          "insightsFilter": {
                            "type": "string",
                            "example": "#FF0000"
                          }
                        }
                      },
                      "font": {
                        "type": "object",
                        "properties": {
                          "family": {
                            "type": "string",
                            "example": "roboto"
                          }
                        }
                      },
                      "summaryURLExpiresIn": {
                        "type": "number"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "enableCustomDomain": {
                        "type": "boolean"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "name",
                      "videoUrl"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "enum": [
                          "video-summary"
                        ]
                      },
                      "videoUrl": {
                        "type": "string",
                        "format": "uri"
                      },
                      "logo": {
                        "type": "string",
                        "format": "uri"
                      },
                      "favicon": {
                        "type": "string",
                        "format": "uri"
                      },
                      "color": {
                        "type": "object",
                        "properties": {
                          "background": {
                            "type": "string",
                            "example": "#0A2136"
                          },
                          "topicsFilter": {
                            "type": "string",
                            "example": "#FF0000"
                          },
                          "insightsFilter": {
                            "type": "string",
                            "example": "#FF0000"
                          }
                        }
                      },
                      "font": {
                        "type": "object",
                        "properties": {
                          "family": {
                            "type": "string",
                            "example": "roboto"
                          }
                        }
                      },
                      "summaryURLExpiresIn": {
                        "type": "number"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "enableCustomDomain": {
                        "type": "boolean"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "name",
                      "audioUrl"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "enum": [
                          "audio-summary"
                        ]
                      },
                      "audioUrl": {
                        "type": "string",
                        "format": "uri"
                      },
                      "logo": {
                        "type": "string",
                        "format": "uri"
                      },
                      "favicon": {
                        "type": "string",
                        "format": "uri"
                      },
                      "color": {
                        "type": "object",
                        "properties": {
                          "background": {
                            "type": "string",
                            "example": "#0A2136"
                          },
                          "topicsFilter": {
                            "type": "string",
                            "example": "#FF0000"
                          },
                          "insightsFilter": {
                            "type": "string",
                            "example": "#FF0000"
                          }
                        }
                      },
                      "font": {
                        "type": "object",
                        "properties": {
                          "family": {
                            "type": "string",
                            "example": "roboto"
                          }
                        }
                      },
                      "summaryURLExpiresIn": {
                        "type": "number"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "enableCustomDomain": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/manage/group": {
      "post": {
        "summary": "Create conversation group",
        "description": "Allows you to create a conversation group.",
        "operationId": "create-conversation-group",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": 4931769134481408
                        },
                        "name": {
                          "type": "string",
                          "example": "Calls made by John"
                        },
                        "description": {
                          "type": "string",
                          "example": "All the conversations made by the agent John Doe are captured in this Group."
                        },
                        "criteria": {
                          "type": "string",
                          "example": "conversation.metadata.agentId==johndoe"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/manage/group/{groupId}": {
      "get": {
        "summary": "Get conversation group",
        "description": "Enter a Group ID to retrieve the Conversation Group.",
        "operationId": "get-conversation-group",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The Group ID created using the Create Group request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": 4931769134481408
                        },
                        "name": {
                          "type": "string",
                          "example": "Calls made by John"
                        },
                        "description": {
                          "type": "string",
                          "example": "All the conversations made by the agent John Doe are captured in this Group."
                        },
                        "criteria": {
                          "type": "string",
                          "example": "conversation.metadata.agentId==johndoe"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "summary": "Update conversation group",
        "description": "Allows you to update a Conversation Group.",
        "operationId": "update-conversation-group",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": 4931769134481408
                      },
                      "name": {
                        "type": "string",
                        "example": "Calls made by John"
                      },
                      "description": {
                        "type": "string",
                        "example": "All the conversations made by the agent John Doe are captured in this Group."
                      },
                      "criteria": {
                        "type": "string",
                        "example": "conversation.metadata.agentId==johndoe"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The Group ID created using the Create Group request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "type": "object",
                      "properties": {
                        "group": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": 4931769134481408
                            },
                            "name": {
                              "type": "string",
                              "example": "Calls made by John"
                            },
                            "description": {
                              "type": "string",
                              "example": "All the conversations made by the agent John Doe are captured in this Group."
                            },
                            "criteria": {
                              "type": "string",
                              "example": "conversation.metadata.agentId==johndoe"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "Delete conversation group",
        "description": "Enter a Group ID to delete a Conversation Group.",
        "operationId": "delete-conversation-group",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The Group ID created using the Create Group request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": 4931769134481408
                    },
                    "type": {
                      "type": "string",
                      "example": "group"
                    },
                    "deleted": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/manage/trackers": {
      "get": {
        "summary": "Get trackers",
        "description": "Enter a Tracker name to retrieve a list of all words and phrases registered to the Tracker name.",
        "operationId": "get-trackers",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Name of the tracker. For filtering trackers by name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "trackers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "4476908732794496"
                          },
                          "name": {
                            "type": "string",
                            "example": "Promotion Mention"
                          },
                          "vocabulary": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "We have a special promotion going on if you book this before"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/manage/tracker": {
      "post": {
        "summary": "Create tracker",
        "description": "Enter a Tracker name and associated word or phrase to create a Tracker entity. You can associate more than one word or phrase with a Tracker name. Tracker entities can be consumed by the Async APIs and Streaming APIs.",
        "operationId": "create-tracker",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Promotion Mention"
                  },
                  "vocabulary": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "We have a special promotion going on if you book this before"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "trackers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "4476908732794496"
                          },
                          "name": {
                            "type": "string",
                            "example": "Promotion Mention"
                          },
                          "vocabulary": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "We have a special promotion going on if you book this before"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/manage/tracker/{trackerId}": {
      "get": {
        "summary": "Get tracker",
        "description": "Enter a Tracker ID to all the words and phrases associated with that Tracker.",
        "operationId": "get-tracker",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "trackerId",
            "in": "path",
            "description": "ID of the tracker",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tracker": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "4476908732794496"
                        },
                        "name": {
                          "type": "string",
                          "example": "Promotion Mention"
                        },
                        "vocabulary": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "We have a special promotion going on if you book this before"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "summary": "Update tracker",
        "description": "Enter a Tracker ID to add or change entity ID, name, and words or phrases. You can change an existing entity by entering the exact ID with new name and vocabulary values.",
        "operationId": "update-tracker",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "4476908732794496"
                  },
                  "name": {
                    "type": "string",
                    "example": "Promotion Mention"
                  },
                  "vocabulary": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "We have a special promotion going on if you book this before"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "trackerId",
            "in": "path",
            "description": "ID of the tracker",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tracker": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "4476908732794496"
                        },
                        "name": {
                          "type": "string",
                          "example": "Promotion Mention"
                        },
                        "vocabulary": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "We have a special promotion going on if you book this before"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "Delete tracker",
        "description": "Enter a Tracker ID to deletes Tracker and associated vocabulary.",
        "operationId": "delete-tracker",
        "tags": [
          "Management API"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "trackerId",
            "in": "path",
            "description": "Tracker ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "example": "tracker"
                    },
                    "deleted": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  }
}